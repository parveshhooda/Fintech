#include<bits/stdc++.h> 
using namespace std; 
  
// m is size of coins array (number of different coins) 
int minCoins(int coins[], int m, int V) 
{ 
   // base case 
   if (V == 0) return 0; 
  
   // Initialize result 
   int res = INT_MAX; 
  
   // Try every coin that has smaller value than V 
   for (int i=0; i<m; i++) 
   { 
     if (coins[i] <= V) 
     { 
         int sub = minCoins(coins, m, V-coins[i]); 
  
         // Check for INT_MAX to avoid overflow and see if 
         // result can minimized 
         if (sub != INT_MAX && sub + 1 < res) 
            res = sub + 1; 
     } 
   } 
   return res; 
} 

void findMin(int deno [], int V, int n) 
{ 
    sort(deno, deno + n); 
  
    // Initialize result 
    vector<int> ans; 
  
    // Traverse through all denomination 
    for (int i = n - 1; i >= 0; i--) { 
  
        // Find denominations 
        while (V >= deno[i]) { 
            V -= deno[i]; 
            ans.push_back(deno[i]); 
        } 
    } 
  
    // Print result 
    for (int i = 0; i < ans.size(); i++) 
        cout << ans[i] << " "; 
} 

  
// Driver program to test above function 
int main() 
{ 
    int coins[] =  {10, 5, 2, 1}; 
    int m = 3; 
    cout<<"enter the amount";
    int V; 
    cin >>V;
    cout << "Minimum coins required is "
         << minCoins(coins, m, V); 
         cout<<endl;
         cout <<"coins required"<<" ";
         findMin(coins, V, m) ;
         
    return 0; 
} 